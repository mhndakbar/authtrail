// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authtrails.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAuthTrail = `-- name: CreateAuthTrail :exec
INSERT INTO authtrails (
  id,
  created_at,
  updated_at,
  type,
  user_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
`

type CreateAuthTrailParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Type      string
	UserID    uuid.UUID
}

func (q *Queries) CreateAuthTrail(ctx context.Context, arg CreateAuthTrailParams) error {
	_, err := q.db.ExecContext(ctx, createAuthTrail,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Type,
		arg.UserID,
	)
	return err
}

const getAuthTrailsForUser = `-- name: GetAuthTrailsForUser :many

SELECT id, created_at, updated_at, type, user_id FROM authtrails WHERE user_id = $1
`

func (q *Queries) GetAuthTrailsForUser(ctx context.Context, userID uuid.UUID) ([]Authtrail, error) {
	rows, err := q.db.QueryContext(ctx, getAuthTrailsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Authtrail
	for rows.Next() {
		var i Authtrail
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
