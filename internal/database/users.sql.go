// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, name, api_key, password)
VALUES (
   $1,
   $2,
   $3,
   $4,
   $5,
   $6
)
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	ApiKey    string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.ApiKey,
		arg.Password,
	)
	return err
}

const getUser = `-- name: GetUser :one

SELECT id, created_at, updated_at, name, api_key, password FROM users WHERE api_key = $1
`

func (q *Queries) GetUser(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one

SELECT id, created_at, updated_at, name, api_key, password FROM users WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
	)
	return i, err
}

const getUserByNameAndPassword = `-- name: GetUserByNameAndPassword :one

SELECT id, created_at, updated_at, name, api_key, password FROM users WHERE name = $1 AND password = $2
`

type GetUserByNameAndPasswordParams struct {
	Name     string
	Password string
}

func (q *Queries) GetUserByNameAndPassword(ctx context.Context, arg GetUserByNameAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNameAndPassword, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.Password,
	)
	return i, err
}
